/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'CondProbMsg'
 * message type.
 */

public class CondProbMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 31;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 11;

    /** Create a new CondProbMsg of size 31. */
    public CondProbMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new CondProbMsg of the given data_length. */
    public CondProbMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CondProbMsg with the given data_length
     * and base offset.
     */
    public CondProbMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CondProbMsg using the given byte array
     * as backing store.
     */
    public CondProbMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CondProbMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public CondProbMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CondProbMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public CondProbMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CondProbMsg embedded in the given message
     * at the given base offset.
     */
    public CondProbMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CondProbMsg embedded in the given message
     * at the given base offset and length.
     */
    public CondProbMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <CondProbMsg> \n";
      try {
        s += "  [finalDestAddr=0x"+Long.toHexString(get_finalDestAddr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: finalDestAddr
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'finalDestAddr' is signed (false).
     */
    public static boolean isSigned_finalDestAddr() {
        return false;
    }

    /**
     * Return whether the field 'finalDestAddr' is an array (false).
     */
    public static boolean isArray_finalDestAddr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'finalDestAddr'
     */
    public static int offset_finalDestAddr() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'finalDestAddr'
     */
    public static int offsetBits_finalDestAddr() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'finalDestAddr'
     */
    public short get_finalDestAddr() {
        return (short)getUIntBEElement(offsetBits_finalDestAddr(), 8);
    }

    /**
     * Set the value of the field 'finalDestAddr'
     */
    public void set_finalDestAddr(short value) {
        setUIntBEElement(offsetBits_finalDestAddr(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'finalDestAddr'
     */
    public static int size_finalDestAddr() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'finalDestAddr'
     */
    public static int sizeBits_finalDestAddr() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: probability
    //   Field type: short[][], unsigned
    //   Offset (bits): 8
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'probability' is signed (false).
     */
    public static boolean isSigned_probability() {
        return false;
    }

    /**
     * Return whether the field 'probability' is an array (true).
     */
    public static boolean isArray_probability() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'probability'
     */
    public static int offset_probability(int index1, int index2) {
        int offset = 8;
        if (index1 < 0 || index1 >= 6) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 40;
        if (index2 < 0 || index2 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index2 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'probability'
     */
    public static int offsetBits_probability(int index1, int index2) {
        int offset = 8;
        if (index1 < 0 || index1 >= 6) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 40;
        if (index2 < 0 || index2 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index2 * 8;
        return offset;
    }

    /**
     * Return the entire array 'probability' as a short[][]
     */
    public short[][] get_probability() {
        short[][] tmp = new short[6][5];
        for (int index0 = 0; index0 < numElements_probability(0); index0++) {
          for (int index1 = 0; index1 < numElements_probability(1); index1++) {
              tmp[index0][index1] = getElement_probability(index0,index1);
          }
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'probability' from the given short[][]
     */
    public void set_probability(short[][] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
          for (int index1 = 0; index1 < value[index0].length; index1++) {
              setElement_probability(index0,index1, value[index0][index1]);
          }
        }
    }

    /**
     * Return an element (as a short) of the array 'probability'
     */
    public short getElement_probability(int index1, int index2) {
        return (short)getUIntBEElement(offsetBits_probability(index1, index2), 8);
    }

    /**
     * Set an element of the array 'probability'
     */
    public void setElement_probability(int index1, int index2, short value) {
        setUIntBEElement(offsetBits_probability(index1, index2), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'probability'
     */
    public static int totalSize_probability() {
        return (240 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'probability'
     */
    public static int totalSizeBits_probability() {
        return 240;
    }

    /**
     * Return the size, in bytes, of each element of the array 'probability'
     */
    public static int elementSize_probability() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'probability'
     */
    public static int elementSizeBits_probability() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'probability'
     */
    public static int numDimensions_probability() {
        return 2;
    }

    /**
     * Return the number of elements in the array 'probability'
     * for the given dimension.
     */
    public static int numElements_probability(int dimension) {
      int array_dims[] = { 6, 5,  };
        if (dimension < 0 || dimension >= 2) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

}
